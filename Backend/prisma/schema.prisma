// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the ENUM types
enum role_type {
  student
  counselor
  institute
  mentor
}

enum session_type_enum {
  online
  offline
}

enum institute_type_enum {
  private
  govt
  semiGovt
  public
}

enum gender_enum {
  female
  male
  other
}

// Define the Roles model
model Role {
  id        Int       @id @default(autoincrement())
  role_name role_type @unique
  User      User[]

  @@map("roles")
}

// Define the Users model
model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255) // Ensure this line exists
  role_id   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role                Role?                @relation(fields: [role_id], references: [id])
  studentPersonalInfo StudentPersonalInfo?
  studentEducation    StudentEducation?
  studentInterest     StudentInterest?

  counselorPersonalInfo CounselorPersonalInfo?
  counselorEducation    CounselorEducation?
  counselorProfessional CounselorProfessional?

  instituteInfo InstituteInfo?
  Session       Session[]
  Program       Program[]

  studentSessions Session[] @relation("StudentSessions")

  counselorSessions Session[] @relation("CounselorSessions")

  Mentor Mentor[]

  UserTraitsStatus UserTraitsStatus[]

  RecommendedCareers RecommendedCareers[]

  @@map("users")
}

// Define the Master Subjects model
model MasterSubject {
  id          Int    @id @default(autoincrement())
  subjectName String @unique @db.VarChar(100)

  @@map("master_subjects")
}

// Define the Master Sports model
model MasterSport {
  id        Int    @id @default(autoincrement())
  sportName String @unique @db.VarChar(100)

  @@map("master_sports")
}

// Define the Master Hobbies model
model MasterHobby {
  id        Int    @id @default(autoincrement())
  hobbyName String @unique @db.VarChar(100)

  @@map("master_hobbies")
}

// Define the Student Personal Info model
model StudentPersonalInfo {
  userId        Int         @id
  image         String?
  dob           DateTime?
  gender        gender_enum
  location      String?
  contactNumber String?

  user User @relation(fields: [userId], references: [id])

  @@map("student_personal_info")
}

// Define the Student Education model
model StudentEducation {
  userId     Int    @id
  schoolName String @db.VarChar(255)
  class      Int

  user User @relation(fields: [userId], references: [id])

  @@map("student_education")
}

// Define the Student Interest model
model StudentInterest {
  userId     Int   @id
  subjectIds Int[] @default([])
  sportIds   Int[] @default([])
  hobbyIds   Int[] @default([])

  user User @relation(fields: [userId], references: [id])

  @@map("student_interest")
}

// Define the Counselor Personal Info model
model CounselorPersonalInfo {
  userId        Int         @id
  image         String?
  dob           DateTime?
  gender        gender_enum
  location      String?
  contactNumber String?

  user User @relation(fields: [userId], references: [id])

  @@map("counselor_personal_info")
}

// Define the Counselor Education model
model CounselorEducation {
  userId      Int    @id
  degree      String @db.VarChar(255)
  certificate String @db.VarChar(50)
  association String @db.VarChar(50)

  user User @relation(fields: [userId], references: [id])

  @@map("counselor_education")
}

// Define the Counselor Professional model
model CounselorProfessional {
  userId           Int     @id
  bio              String?
  yearOfExperience Int?
  domain           String?
  image            String?

  user User @relation(fields: [userId], references: [id])

  @@map("counselor_professional")
}

// Define the Session model
model Session {
  sessionId   Int  @id @default(autoincrement())
  studentId   Int?
  counselorId Int?

  sessionTime DateTime?
  sessionDate DateTime?

  sessionType session_type_enum

  location String @default("remote")

  student User? @relation("StudentSessions", fields: [studentId], references: [id])

  counselor User? @relation("CounselorSessions", fields: [counselorId], references: [id])

  User User[]

  @@map("sessions")
}

// Define the Institute Info model
model InstituteInfo {
  userId        Int                 @id
  imageUrl      String?
  address       String?
  contactNumber String?
  establishYear Int?
  instituteType institute_type_enum

  studentBody String?

  user User @relation(fields: [userId], references: [id])

  @@map("institute_info")
}

model Mentor {
  userId         Int       @id // Unique identifier for each mentor, linked to User model
  expertise      String? // Area of expertise or specialization
  bio            String? // Short biography or description of the mentor
  createdAt      DateTime  @default(now()) // Timestamp when the mentor record was created
  updatedAt      DateTime? // Optional timestamp for when the record was last updated
  certifications String[] // Array of URLs for certification images

  user User @relation(fields: [userId], references: [id]) // Relationship to User model

  MentorEducation MentorEducation[]

  MentorProfessional MentorProfessional[]

  @@map("mentors")
}

model MentorEducation {
  userId      Int     @id // Foreign key linking to Mentor (and indirectly to User)
  degree      String? // Degree obtained by the mentor
  institution String? // Institution where the degree was obtained

  mentor Mentor @relation(fields: [userId], references: [userId]) // Relationship to Mentor model

  @@map("mentor_education")
}

model MentorProfessional {
  userId           Int              @id // Foreign key linking to Mentor (and indirectly to User)
  bio              String? // Biography or description of professional background
  yearOfExperience Int? // Years of experience in their field
  type             mentor_type_enum // Type of mentor (Associate or Chief)

  mentor Mentor @relation(fields: [userId], references: [userId]) // Relationship to Mentor model

  @@map("mentor_professional")
}

// New ENUM for mentor types
enum mentor_type_enum {
  associate
  chief
}

// Define the Programs model
model Program {
  instituteId               Int     @id
  subjects                  String?
  specialPrograms           String?
  languageOffer             String?
  certificateAndAffiliation String?

  institute User @relation(fields: [instituteId], references: [id])

  @@map("programs")
}

model QuizQuestion {
  id        Int      @id @default(autoincrement())
  category  String
  grade     Int
  traits    String?
  question  String   @unique
  answer    String
  options   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quiz_questions")
}

model UserTraitsStatus {
  id                Int      @id @default(autoincrement()) // Unique identifier for each record
  userId            Int // To associate the record with a specific user
  hollandCodeTraits String[] // Top Holland Code trait (array of text)
  bigFiveTraits     String[] // Top Big Five Personality trait (array of text)
  aptitudeStatus    String? // Aptitude Test status (e.g., Low, Mid, High)
  iqStatus          String? // IQ Test status (e.g., Low, Mid, High)
  createdAt         DateTime @default(now()) // Timestamp for record creation

  user User @relation(fields: [userId], references: [id]) // Relationship to User model

  @@map("user_traits_status")
}

model RecommendedCareers {
  id        Int      @id @default(autoincrement()) // Unique identifier for each record
  userId    Int // To associate the record with a specific user
  career1   String? // First recommended career
  career2   String? // Second recommended career
  career3   String? // Third recommended career
  createdAt DateTime @default(now()) // Timestamp for record creation

  user User @relation(fields: [userId], references: [id]) // Relationship to User model

  @@map("recommended_careers")
}
